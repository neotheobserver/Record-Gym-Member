/*
 * @author Ardent Sharma 20049385 
 * @author Ashma Maharjan 20048835 
 * @author Bhishan Khatiwoda 20049401 
 * @author Jeena Dahal 20048904 
 * @version 1.1.1
 */

package thehulkfitness;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import static java.awt.event.KeyEvent.VK_BACK_SPACE;
import static java.awt.event.KeyEvent.VK_DELETE;
import static java.lang.Character.isDigit;

import java.util.ArrayList;
import java.util.Enumeration;
import javax.swing.AbstractButton;
import javax.swing.Box;
import javax.swing.ButtonGroup;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

/* 
    The main class that extends a Jframe and implements all the GUI,
    methods, and features in the developed app
 */
public class TheHulkFitness extends javax.swing.JFrame {
    
    //colors used to manage the background of buttons and/or dialog box
    public static Color greenBG = new Color(0, 153, 0);
    public static Color darkBG = new Color(84, 84, 84);
    
    /**
     * Creates new form TheHulkFitness
     */
    public TheHulkFitness() {
        //call method to initialize all th components
        initComponents();
        setTitle("The Hulk Fitness Registration"); // set title of JFrame
        //set the start panel with fitness logo true
        startPanel.setVisible(true);
        //set the menu bar and tabbed pane invisible
        menuBar.setVisible(false);
        tabbedPane.setVisible(false);
        //set the display features of the overall frame
        setResizable(false);
        setLocationRelativeTo(null);
        pack();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    //auto generated code by netbeans for GUI
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        genderGroup = new javax.swing.ButtonGroup();
        targetGroup = new javax.swing.ButtonGroup();
        jRadioButtonMenuItem1 = new javax.swing.JRadioButtonMenuItem();
        layeredPane = new javax.swing.JLayeredPane();
        startPanel = new javax.swing.JPanel();
        logoLbl = new javax.swing.JLabel();
        startBtn = new javax.swing.JButton();
        tabbedPane = new javax.swing.JTabbedPane();
        formPanel = new javax.swing.JPanel();
        titleLbl = new javax.swing.JLabel();
        mainFormPanel = new javax.swing.JPanel();
        memberIdLbl = new javax.swing.JLabel();
        nameLbl = new javax.swing.JLabel();
        ageLbl = new javax.swing.JLabel();
        addressLbl = new javax.swing.JLabel();
        genderLbl = new javax.swing.JLabel();
        phoneLbl = new javax.swing.JLabel();
        activitiesLbl = new javax.swing.JLabel();
        feesLbl = new javax.swing.JLabel();
        memberIdTF = new javax.swing.JTextField();
        nameTF = new javax.swing.JTextField();
        heightLbl = new javax.swing.JLabel();
        weightLbl = new javax.swing.JLabel();
        weightTF = new javax.swing.JTextField();
        ageTF = new javax.swing.JTextField();
        radioMale = new javax.swing.JRadioButton();
        radioFemale = new javax.swing.JRadioButton();
        phoneTF = new javax.swing.JTextField();
        checkBoxZumba = new javax.swing.JCheckBox();
        checkBoxCardio = new javax.swing.JCheckBox();
        checkBoxGym = new javax.swing.JCheckBox();
        checkBoxYoga = new javax.swing.JCheckBox();
        feesTF = new javax.swing.JTextField();
        checkBoxSauna = new javax.swing.JCheckBox();
        checkBoxBoxing = new javax.swing.JCheckBox();
        comboJoinDay = new javax.swing.JComboBox<>();
        comboJoinMonth = new javax.swing.JComboBox<>();
        comboJoinYear = new javax.swing.JComboBox<>();
        targetLbl = new javax.swing.JLabel();
        radioWeightLoss = new javax.swing.JRadioButton();
        radioWeightGain = new javax.swing.JRadioButton();
        radioStayFit = new javax.swing.JRadioButton();
        joinedDateLbl = new javax.swing.JLabel();
        addressTxtArea = new javax.swing.JScrollPane();
        addressTA = new javax.swing.JTextArea();
        bmiTF = new javax.swing.JTextField();
        BmiLbl = new javax.swing.JLabel();
        heightTF = new javax.swing.JTextField();
        addBtn = new javax.swing.JButton();
        clearBtn = new javax.swing.JButton();
        displayPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        memberTable = new javax.swing.JTable();
        jLabel9 = new javax.swing.JLabel();
        sortComboBox = new javax.swing.JComboBox<>();
        jLabel15 = new javax.swing.JLabel();
        searchComboBox = new javax.swing.JComboBox<>();
        jLabel16 = new javax.swing.JLabel();
        searchValue = new javax.swing.JTextField();
        searchButton = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();
        sortButton = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openFIle = new javax.swing.JMenuItem();
        exitProgram = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();

        jRadioButtonMenuItem1.setSelected(true);
        jRadioButtonMenuItem1.setText("jRadioButtonMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        startPanel.setBackground(new java.awt.Color(84, 84, 84));

        logoLbl.setBackground(new java.awt.Color(84, 84, 84));
        logoLbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        logoLbl.setIcon(new javax.swing.ImageIcon(getClass().getResource("/thehulkfitness/thehulkfitness.png"))); // NOI18N

        startBtn.setBackground(new java.awt.Color(0, 153, 0));
        startBtn.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        startBtn.setForeground(new java.awt.Color(255, 255, 255));
        startBtn.setText("CLICK HERE TO START");
        startBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout startPanelLayout = new javax.swing.GroupLayout(startPanel);
        startPanel.setLayout(startPanelLayout);
        startPanelLayout.setHorizontalGroup(
            startPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(startPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(logoLbl, javax.swing.GroupLayout.DEFAULT_SIZE, 979, Short.MAX_VALUE)
                .addGap(22, 22, 22))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, startPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(startBtn)
                .addGap(419, 419, 419))
        );
        startPanelLayout.setVerticalGroup(
            startPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(startPanelLayout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addComponent(logoLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 394, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(startBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(51, Short.MAX_VALUE))
        );

        formPanel.setBackground(new java.awt.Color(84, 84, 84));

        titleLbl.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        titleLbl.setForeground(new java.awt.Color(255, 255, 255));
        titleLbl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleLbl.setText("MEMBER REGISTRATION");

        mainFormPanel.setBackground(new java.awt.Color(84, 84, 84));

        memberIdLbl.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        memberIdLbl.setForeground(new java.awt.Color(255, 255, 255));
        memberIdLbl.setText("MEMBER ID:");

        nameLbl.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        nameLbl.setForeground(new java.awt.Color(255, 255, 255));
        nameLbl.setText("NAME:");

        ageLbl.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        ageLbl.setForeground(new java.awt.Color(255, 255, 255));
        ageLbl.setText("AGE:");

        addressLbl.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        addressLbl.setForeground(new java.awt.Color(255, 255, 255));
        addressLbl.setText("ADDRESS:");

        genderLbl.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        genderLbl.setForeground(new java.awt.Color(255, 255, 255));
        genderLbl.setText("GENDER:");

        phoneLbl.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        phoneLbl.setForeground(new java.awt.Color(255, 255, 255));
        phoneLbl.setText("PHONE NUMBER:");

        activitiesLbl.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        activitiesLbl.setForeground(new java.awt.Color(255, 255, 255));
        activitiesLbl.setText("ACTIVITIES:");

        feesLbl.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        feesLbl.setForeground(new java.awt.Color(255, 255, 255));
        feesLbl.setText("FEES:");

        memberIdTF.setEditable(false);
        memberIdTF.setText("Generated By Default");
        memberIdTF.setName(""); // NOI18N

        nameTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                nameTFKeyTyped(evt);
            }
        });

        heightLbl.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        heightLbl.setForeground(new java.awt.Color(255, 255, 255));
        heightLbl.setText("HEIGHT (cm):");

        weightLbl.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        weightLbl.setForeground(new java.awt.Color(255, 255, 255));
        weightLbl.setText("WEIGHT (kg):");

        weightTF.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                weightTFFocusLost(evt);
            }
        });
        weightTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                weightTFKeyTyped(evt);
            }
        });

        ageTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                ageTFKeyTyped(evt);
            }
        });

        radioMale.setBackground(new java.awt.Color(84, 84, 84));
        genderGroup.add(radioMale);
        radioMale.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        radioMale.setForeground(new java.awt.Color(255, 255, 255));
        radioMale.setSelected(true);
        radioMale.setText("MALE");

        radioFemale.setBackground(new java.awt.Color(84, 84, 84));
        genderGroup.add(radioFemale);
        radioFemale.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        radioFemale.setForeground(new java.awt.Color(255, 255, 255));
        radioFemale.setText("FEMALE");

        phoneTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                phoneTFKeyTyped(evt);
            }
        });

        checkBoxZumba.setBackground(new java.awt.Color(84, 84, 84));
        checkBoxZumba.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        checkBoxZumba.setForeground(new java.awt.Color(255, 255, 255));
        checkBoxZumba.setText("ZUMBA  ");
        checkBoxZumba.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxZumbaActionPerformed(evt);
            }
        });

        checkBoxCardio.setBackground(new java.awt.Color(84, 84, 84));
        checkBoxCardio.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        checkBoxCardio.setForeground(new java.awt.Color(255, 255, 255));
        checkBoxCardio.setText("CARDIO ");
        checkBoxCardio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxCardioActionPerformed(evt);
            }
        });

        checkBoxGym.setBackground(new java.awt.Color(84, 84, 84));
        checkBoxGym.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        checkBoxGym.setForeground(new java.awt.Color(255, 255, 255));
        checkBoxGym.setText("GYM ");
        checkBoxGym.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxGymActionPerformed(evt);
            }
        });

        checkBoxYoga.setBackground(new java.awt.Color(84, 84, 84));
        checkBoxYoga.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        checkBoxYoga.setForeground(new java.awt.Color(255, 255, 255));
        checkBoxYoga.setText("YOGA ");
        checkBoxYoga.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxYogaActionPerformed(evt);
            }
        });

        checkBoxSauna.setBackground(new java.awt.Color(84, 84, 84));
        checkBoxSauna.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        checkBoxSauna.setForeground(new java.awt.Color(255, 255, 255));
        checkBoxSauna.setText("SAUNA ");
        checkBoxSauna.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxSaunaActionPerformed(evt);
            }
        });

        checkBoxBoxing.setBackground(new java.awt.Color(84, 84, 84));
        checkBoxBoxing.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        checkBoxBoxing.setForeground(new java.awt.Color(255, 255, 255));
        checkBoxBoxing.setText("BOXING ");
        checkBoxBoxing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxBoxingActionPerformed(evt);
            }
        });

        comboJoinDay.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        comboJoinDay.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "DAY", "01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32" }));

        comboJoinMonth.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        comboJoinMonth.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "MONTH", "JAN", "FEB", "MAR", "APR", "MAY", "JUN", "JULY", "AUG", "SEP", "OCT", "NOV", "DEC" }));

        comboJoinYear.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        comboJoinYear.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "YEAR", "2019", "2020", "2021", "2022", "2023", "2024", "2025" }));

        targetLbl.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        targetLbl.setForeground(new java.awt.Color(255, 255, 255));
        targetLbl.setText("TARGET:");

        radioWeightLoss.setBackground(new java.awt.Color(84, 84, 84));
        targetGroup.add(radioWeightLoss);
        radioWeightLoss.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        radioWeightLoss.setForeground(new java.awt.Color(255, 255, 255));
        radioWeightLoss.setText("WEIGHT LOSS");
        radioWeightLoss.setEnabled(false);

        radioWeightGain.setBackground(new java.awt.Color(84, 84, 84));
        targetGroup.add(radioWeightGain);
        radioWeightGain.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        radioWeightGain.setForeground(new java.awt.Color(255, 255, 255));
        radioWeightGain.setText("WEIGHT GAIN");
        radioWeightGain.setEnabled(false);

        radioStayFit.setBackground(new java.awt.Color(84, 84, 84));
        targetGroup.add(radioStayFit);
        radioStayFit.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        radioStayFit.setForeground(new java.awt.Color(255, 255, 255));
        radioStayFit.setText("STAY FIT");
        radioStayFit.setEnabled(false);

        joinedDateLbl.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        joinedDateLbl.setForeground(new java.awt.Color(255, 255, 255));
        joinedDateLbl.setText("JOINED DATE:");

        addressTA.setColumns(20);
        addressTA.setRows(5);
        addressTA.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                addressTAKeyTyped(evt);
            }
        });
        addressTxtArea.setViewportView(addressTA);

        bmiTF.setEditable(false);

        BmiLbl.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        BmiLbl.setForeground(new java.awt.Color(255, 255, 255));
        BmiLbl.setText("BMI:");

        heightTF.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                heightTFFocusLost(evt);
            }
        });
        heightTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                heightTFKeyTyped(evt);
            }
        });

        addBtn.setBackground(new java.awt.Color(0, 153, 0));
        addBtn.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        addBtn.setForeground(new java.awt.Color(255, 255, 255));
        addBtn.setText("ADD");
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });

        clearBtn.setBackground(new java.awt.Color(0, 153, 0));
        clearBtn.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        clearBtn.setForeground(new java.awt.Color(255, 255, 255));
        clearBtn.setText("CLEAR");
        clearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout mainFormPanelLayout = new javax.swing.GroupLayout(mainFormPanel);
        mainFormPanel.setLayout(mainFormPanelLayout);
        mainFormPanelLayout.setHorizontalGroup(
            mainFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainFormPanelLayout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(mainFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainFormPanelLayout.createSequentialGroup()
                        .addGroup(mainFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(phoneLbl)
                            .addComponent(addressLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(20, 20, 20)
                        .addGroup(mainFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(phoneTF)
                            .addComponent(addressTxtArea, javax.swing.GroupLayout.DEFAULT_SIZE, 198, Short.MAX_VALUE)))
                    .addGroup(mainFormPanelLayout.createSequentialGroup()
                        .addGroup(mainFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(memberIdLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(nameLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(41, 41, 41)
                        .addGroup(mainFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nameTF, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(memberIdTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(ageLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(mainFormPanelLayout.createSequentialGroup()
                        .addGroup(mainFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(activitiesLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(feesLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(43, 43, 43)
                        .addGroup(mainFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(mainFormPanelLayout.createSequentialGroup()
                                .addGroup(mainFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(checkBoxZumba)
                                    .addComponent(checkBoxYoga)
                                    .addComponent(checkBoxGym))
                                .addGap(18, 18, 18)
                                .addGroup(mainFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(checkBoxBoxing)
                                    .addComponent(checkBoxCardio)
                                    .addComponent(checkBoxSauna)))
                            .addComponent(feesTF, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(mainFormPanelLayout.createSequentialGroup()
                        .addComponent(genderLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(42, 42, 42)
                        .addComponent(radioMale, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(radioFemale))
                    .addGroup(mainFormPanelLayout.createSequentialGroup()
                        .addGap(121, 121, 121)
                        .addComponent(ageTF, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(186, 186, 186)
                .addGroup(mainFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(weightLbl)
                    .addGroup(mainFormPanelLayout.createSequentialGroup()
                        .addGroup(mainFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(heightLbl)
                            .addComponent(BmiLbl))
                        .addGap(73, 73, 73)
                        .addGroup(mainFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bmiTF, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(mainFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(heightTF, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(weightTF, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(mainFormPanelLayout.createSequentialGroup()
                        .addComponent(targetLbl)
                        .addGap(73, 73, 73)
                        .addGroup(mainFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(radioWeightGain)
                            .addComponent(radioWeightLoss)
                            .addComponent(radioStayFit)))
                    .addGroup(mainFormPanelLayout.createSequentialGroup()
                        .addComponent(joinedDateLbl)
                        .addGap(39, 39, 39)
                        .addComponent(comboJoinDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comboJoinMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comboJoinYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainFormPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(addBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(clearBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(57, 57, 57))
        );
        mainFormPanelLayout.setVerticalGroup(
            mainFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainFormPanelLayout.createSequentialGroup()
                .addGroup(mainFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainFormPanelLayout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addGroup(mainFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(memberIdLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(memberIdTF, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(mainFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(nameTF)
                            .addComponent(nameLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(mainFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ageLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ageTF)))
                    .addGroup(mainFormPanelLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(mainFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(heightLbl)
                            .addComponent(heightTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(mainFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(weightLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(weightTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(mainFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(BmiLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(bmiTF, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(mainFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainFormPanelLayout.createSequentialGroup()
                        .addGroup(mainFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(genderLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(radioMale)
                            .addComponent(radioFemale))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(mainFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(phoneLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(phoneTF))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(mainFormPanelLayout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addGroup(mainFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(joinedDateLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(mainFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(comboJoinDay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(comboJoinMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(comboJoinYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, Short.MAX_VALUE)))
                .addGroup(mainFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainFormPanelLayout.createSequentialGroup()
                        .addGroup(mainFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(addressLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addressTxtArea, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(mainFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(activitiesLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(mainFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(checkBoxZumba)
                                .addComponent(checkBoxCardio))))
                    .addGroup(mainFormPanelLayout.createSequentialGroup()
                        .addGroup(mainFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(radioWeightLoss)
                            .addComponent(targetLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(radioWeightGain)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(radioStayFit)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkBoxYoga)
                    .addComponent(checkBoxBoxing))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(checkBoxGym)
                    .addComponent(checkBoxSauna))
                .addGap(18, 18, 18)
                .addGroup(mainFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(feesLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(feesTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(mainFormPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(addBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
                    .addComponent(clearBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout formPanelLayout = new javax.swing.GroupLayout(formPanel);
        formPanel.setLayout(formPanelLayout);
        formPanelLayout.setHorizontalGroup(
            formPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(formPanelLayout.createSequentialGroup()
                .addComponent(titleLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(formPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainFormPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        formPanelLayout.setVerticalGroup(
            formPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(formPanelLayout.createSequentialGroup()
                .addComponent(titleLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mainFormPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(58, 58, 58))
        );

        tabbedPane.addTab("Registration Form", formPanel);

        displayPanel.setBackground(new java.awt.Color(84, 84, 84));

        memberTable.setBackground(new java.awt.Color(204, 204, 204));
        memberTable.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        memberTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "MEMBER ID", "NAME", "AGE", "ADDRESS", "PH. NUMBER", "GENDER", "JOINED DATE", "ACTIVITIES", "FEES", "BMI", "TARGET"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        memberTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        memberTable.setGridColor(new java.awt.Color(0, 0, 0));
        memberTable.setName(""); // NOI18N
        memberTable.setRowHeight(25);
        memberTable.setShowGrid(true);
        memberTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                memberTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(memberTable);
        if (memberTable.getColumnModel().getColumnCount() > 0) {
            memberTable.getColumnModel().getColumn(2).setPreferredWidth(50);
            memberTable.getColumnModel().getColumn(4).setPreferredWidth(100);
            memberTable.getColumnModel().getColumn(5).setPreferredWidth(80);
            memberTable.getColumnModel().getColumn(6).setPreferredWidth(100);
            memberTable.getColumnModel().getColumn(9).setPreferredWidth(50);
            memberTable.getColumnModel().getColumn(10).setPreferredWidth(80);
        }

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("SORT BY:");

        sortComboBox.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        sortComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "NAME", "AGE", "BMI", "FEES" }));

        jLabel15.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(255, 255, 255));
        jLabel15.setText("SEARCH BY:");

        searchComboBox.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        searchComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "NAME", "MOBILE", "ACTIVITIES" }));
        searchComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchComboBoxActionPerformed(evt);
            }
        });

        jLabel16.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(255, 255, 255));
        jLabel16.setText("ENTER VALUE:");

        searchButton.setBackground(new java.awt.Color(0, 153, 0));
        searchButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        searchButton.setForeground(new java.awt.Color(255, 255, 255));
        searchButton.setText("SEARCH");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        deleteBtn.setBackground(new java.awt.Color(0, 153, 0));
        deleteBtn.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        deleteBtn.setForeground(new java.awt.Color(255, 255, 255));
        deleteBtn.setText("DELETE");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        sortButton.setBackground(new java.awt.Color(0, 153, 0));
        sortButton.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        sortButton.setForeground(new java.awt.Color(255, 255, 255));
        sortButton.setText("SORT");
        sortButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout displayPanelLayout = new javax.swing.GroupLayout(displayPanel);
        displayPanel.setLayout(displayPanelLayout);
        displayPanelLayout.setHorizontalGroup(
            displayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(displayPanelLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(displayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(displayPanelLayout.createSequentialGroup()
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(displayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sortComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(sortButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 216, Short.MAX_VALUE)
                        .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(displayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(displayPanelLayout.createSequentialGroup()
                                .addComponent(searchComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(searchValue, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(searchButton))))
                .addContainerGap())
            .addGroup(displayPanelLayout.createSequentialGroup()
                .addGap(432, 432, 432)
                .addComponent(deleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        displayPanelLayout.setVerticalGroup(
            displayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, displayPanelLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(displayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sortComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchValue, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(displayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sortButton, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(deleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(70, Short.MAX_VALUE))
        );

        tabbedPane.addTab("Data Display", displayPanel);

        layeredPane.setLayer(startPanel, javax.swing.JLayeredPane.DEFAULT_LAYER);
        layeredPane.setLayer(tabbedPane, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout layeredPaneLayout = new javax.swing.GroupLayout(layeredPane);
        layeredPane.setLayout(layeredPaneLayout);
        layeredPaneLayout.setHorizontalGroup(
            layeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(startPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(tabbedPane))
        );
        layeredPaneLayout.setVerticalGroup(
            layeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layeredPaneLayout.createSequentialGroup()
                .addComponent(startPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(tabbedPane, javax.swing.GroupLayout.Alignment.TRAILING))
        );

        fileMenu.setText("File");

        openFIle.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        openFIle.setText("Open");
        openFIle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFIleActionPerformed(evt);
            }
        });
        fileMenu.add(openFIle);

        exitProgram.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        exitProgram.setText("Exit");
        exitProgram.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitProgramActionPerformed(evt);
            }
        });
        fileMenu.add(exitProgram);

        menuBar.add(fileMenu);

        helpMenu.setIcon(new javax.swing.ImageIcon(getClass().getResource("/thehulkfitness/helpppp.png"))); // NOI18N
        helpMenu.setText("Help");
        helpMenu.addMenuListener(new javax.swing.event.MenuListener() {
            public void menuCanceled(javax.swing.event.MenuEvent evt) {
            }
            public void menuDeselected(javax.swing.event.MenuEvent evt) {
            }
            public void menuSelected(javax.swing.event.MenuEvent evt) {
                helpMenuMenuSelected(evt);
            }
        });
        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(layeredPane)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(layeredPane)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
   
    //when start button in clicked in the original JFrame
    private void startBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startBtnActionPerformed
        // call method that manages components in menu bar
        manageBarComponents();
        //set the tabbed pane and menu bar visible
        tabbedPane.setVisible(true);
        menuBar.setVisible(true);
        //set the start panel invisible
        startPanel.setVisible(false);
    }//GEN-LAST:event_startBtnActionPerformed
    
    //method that hanldes event when search button is clicked
    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        // initialize values by getting the search input provided and the combobox selected
        String userInput = searchValue.getText();
        String userCriteria = (String)searchComboBox.getSelectedItem();
        //instantiate Search Class to search details
        Search searchEngine = new Search();
    
        //if the combo box selected is for name
        if (userCriteria.equals("NAME")) {
            //if the current input text is empty display error
            if (userInput.isEmpty()) {
                JOptionPane.showMessageDialog(null, "Please enter a name to search!!", "Error", JOptionPane.ERROR_MESSAGE);
            }
            //search member with the entered name in the table
            else {
                if (hasNumber(userInput) || hasSpecialCharacters(userInput)) {
                    JOptionPane.showMessageDialog(null, "Enter only alphabets", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                //get a 2d sorted array of table based on the criterial i.e. comboBox selected
                String[][] sortedRecords = searchEngine.getSortedRecord(memberTable, userCriteria);
                //if no record in table display error message
                if (sortedRecords.length == 0) {
                    JOptionPane.showMessageDialog(null, "No data to search from!", "Error", JOptionPane.ERROR_MESSAGE);
                } else {
                    String[] sortedNameList = searchEngine.getListOfNames(sortedRecords);
                    int foundIndex = searchEngine.getNameIndex(sortedNameList, userInput.toUpperCase(), 0, sortedRecords.length-1);
                    //check if the entered name was found in the list and display accordingly
                    if (foundIndex != -1)
                        //call method of Search class that displays records
                        searchEngine.displayFoundRecord(sortedRecords, foundIndex);
                    else
                        //call method of Search class that display records not found message
                       searchEngine.displayRecordNotFound();
                }
               
            }
        }
        //if the combo box selected is for mobile
        else if(userCriteria.equals("MOBILE")) {
            //if the current input text is empty display error
            if (userInput.isEmpty()) {
                JOptionPane.showMessageDialog(null, "Please enter a mobile number to search!!", "Error", JOptionPane.ERROR_MESSAGE);
            }
            //search member witht the entered name in the table
            else {
                if (!isValidNumber(userInput)) {
                    JOptionPane.showMessageDialog(null, "Enter a valid number!", "Error", JOptionPane.ERROR_MESSAGE);
                }
                else {
                    //get a 2d sorted array of table based on the criterial i.e. comboBox selected
                    String[][] sortedRecords = searchEngine.getSortedRecord(memberTable, userCriteria);
                    //if no record display error message
                    if (sortedRecords.length == 0) {
                        JOptionPane.showMessageDialog(null, "No data to search from!", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                    else {
                        long[] sortedMobileList = searchEngine.getListOfMobile(sortedRecords);
                        int foundIndex = searchEngine.getMobileIndex(sortedMobileList, Long.parseLong(userInput), 0, sortedRecords.length-1);
                        //check if the entered number was found in the list and display accordingly
                        if (foundIndex != -1)
                            //call method of Search class that displays records
                            searchEngine.displayFoundRecord(sortedRecords, foundIndex);
                        else
                            //call method of Search class that displays records not found message
                           searchEngine.displayRecordNotFound(); 
                    }         
                }   
            }
        }
        else{
            //call method that searches based on activities
            searchByActivities(); 
        }
    }//GEN-LAST:event_searchButtonActionPerformed
    
    //method that hanldes deleting of data when delete butotn is clicked
    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        // get the default table model of our table
        DefaultTableModel table  = (DefaultTableModel) memberTable.getModel();;
        
        //if the table has no data return no data found error
        if(memberTable.getRowCount() == 0){
            JOptionPane.showMessageDialog(rootPane, "No data found to delete!","Error",JOptionPane.ERROR_MESSAGE);
        }
        //if no row has been selected return no row selected error
        else if (memberTable.getSelectedRow() == -1){
            JOptionPane.showMessageDialog(rootPane, "No row selected to delete!!","Error", JOptionPane.ERROR_MESSAGE);
        }
        else{
            //ask user confirmation to remove row
            int result = JOptionPane.showConfirmDialog(rootPane, "Do you want to remove item?");
            //if yes remove the row from the table
            if(result == JOptionPane.YES_OPTION){
                table.removeRow(memberTable.getSelectedRow());
            }          
        }
    }//GEN-LAST:event_deleteBtnActionPerformed
    
    //method that handles clearing of data when clear button is clicked
    private void clearBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearBtnActionPerformed
        // call method that resets the value of all the related GUI componentss
        resetValues();
    }//GEN-LAST:event_clearBtnActionPerformed
    
    //method that handles addition of data to table when add button is clicked
    private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnActionPerformed
        // get the values from all the text field, comboBox, and radio button
        String memberID = memberIdTF.getText();
        String name = nameTF.getText();
        String age = ageTF.getText();
        String phone= phoneTF.getText();
        String address = addressTA.getText();
        String height = heightTF.getText();
        String weight = weightTF.getText();
        String gender = getSelectedRadioButtonText(genderGroup);
        String target = getSelectedRadioButtonText(targetGroup);
        String joinedDate = getJoinedDate();
        
        //check if any of the input is not provided and show error
        if(memberID.isEmpty() || name.isEmpty() || age.isEmpty()|| phone.isEmpty()
        || address.isEmpty() || height.isEmpty() || weight.isEmpty() || gender.isEmpty() 
                || joinedDate.isEmpty() || target.isEmpty()){
            JOptionPane.showMessageDialog(rootPane, "No any fields should be empty.","Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (checkCheckBoxChecked()) {
            JOptionPane.showMessageDialog(rootPane, "Atleast one activity should be selected.","Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        //calculate bmi based on the height and weight
        float bmi = calculateBMI(Float.parseFloat(height), Float.parseFloat(weight));
        
        //get the row count and iterate over the existing rows in table to get the maximum value of member id
        int rowCount = memberTable.getRowCount();
        int maxValue = 0;
        for (int i = 0; i <rowCount; i++) {
            int memberId = Integer.parseInt((String)memberTable.getValueAt(i, 0));
            if (memberId > maxValue) {
                maxValue = memberId;
            }
        }
        
        //create an string array with all the required information for a row in the table
        String[] information = {String.valueOf(maxValue+1),name.toUpperCase(),age,address,phone, gender, joinedDate, activities, String.valueOf(feesTF.getText()), String.valueOf(bmi), target};
        //get the default model of the tbale
        DefaultTableModel myModel = (DefaultTableModel) memberTable.getModel();
        //get user input to make sure they want to add data
        int input = JOptionPane.showConfirmDialog(null, 
                "Would you like to add the info table?", "Confirmation Dialog Box", 
                JOptionPane.OK_CANCEL_OPTION, JOptionPane.INFORMATION_MESSAGE);
        //if user wants to add data add row to the table using defualt table model
        if (input == JOptionPane.YES_OPTION) {
            myModel.addRow(information);
            //set the tab index to 1 to show the table
            tabbedPane.setSelectedIndex(1);
            //reset all the values in the text fields and other components
            resetValues();
        } 
    }//GEN-LAST:event_addBtnActionPerformed

    //method that updates values if check box for sauna is selected
    private void checkBoxSaunaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxSaunaActionPerformed
        //call method that add/subtract fee based on whether selected or deselected
        feesCalculation(checkBoxSauna, 1200);
    }//GEN-LAST:event_checkBoxSaunaActionPerformed
    
    //method that updates values if check box for zumba is selected
    private void checkBoxZumbaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxZumbaActionPerformed
        //call method that add/subtract fee based on whether selected or deselected
        feesCalculation(checkBoxZumba,800);
    }//GEN-LAST:event_checkBoxZumbaActionPerformed
    
    //method that handles event of when exit is selected from menu items
    private void exitProgramActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitProgramActionPerformed
        // Exit out of the system with code 0
        System.exit(0);
    }//GEN-LAST:event_exitProgramActionPerformed
    
    //method that handles event of when open is selected from menu items
    private void openFIleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openFIleActionPerformed
        // an instance of JFileChooser is created
        JFileChooser chooseFile = new JFileChooser();
        //filter the filechooser to only allow text files
        chooseFile.setAcceptAllFileFilterUsed(false);
        chooseFile.addChoosableFileFilter(new FileNameExtensionFilter("*.txt", "txt"));
        //show default dialogbox
        chooseFile.showOpenDialog(null);
        //instantiate OpenFile and pass the instace of table
        OpenFile textFile = new OpenFile(memberTable);
        //use readFile method of OpenFile class to readFile
        textFile.readFile(chooseFile.getSelectedFile());
        //add the read file to the table
        textFile.addFileToTable();
        //set the second tabbed pane so that the table is shown
        tabbedPane.setSelectedIndex(1);
    }//GEN-LAST:event_openFIleActionPerformed
    
    //method that handles event of help menu being selected
    private void helpMenuMenuSelected(javax.swing.event.MenuEvent evt) {//GEN-FIRST:event_helpMenuMenuSelected
        // Create a dialog box that display details for users
        JDialog helpDialog = new JDialog(this, "Help");
        //create a text area that displays detail
        JTextArea helpDialogArea= new JTextArea("This is the online registration form for THE HULK FITNESS gym club."
            +"\nYou can register by entering your details into the form and \nclicking the ADD button.\n" +
            "Our team will reach out to you after you register.\n"+
            "\nFor more details:\n" +
            "Contact : 9803040248\n" + "or mail us at - thehulkfitness@gmail.com"+
            "\n\n                                              THANK YOU!        \n"
                + "\n                         WINNERS TRAIN, LOSERS COMPLAIN!              \n");
        //make the text field uneditable and add ot dialog box
        
        helpDialogArea.setEditable(false);
        helpDialog.add(helpDialogArea);
        helpDialog.setLocation(420,200);
        helpDialog.setSize(490, 290);
        //set display details for dialog box
        
        helpDialogArea.setSize(490,290);
        helpDialogArea.setFont((new Font("Segoe",Font.BOLD,14)));
        helpDialogArea.setBackground(new Color(229,251,229));
        helpDialogArea.setForeground(Color.black);
        helpDialog.setVisible(true);
    }//GEN-LAST:event_helpMenuMenuSelected
    
    //bmi that checks and calculates bmi when focus lost from height
    private void heightTFFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_heightTFFocusLost
        //if either weight or height empty do nothing
        if (heightTF.getText().isEmpty() || weightTF.getText().isEmpty()){
        }
        else {
            //if both value exists calculate bmi and set the text of bmi text field
            bmiTF.setText(String.valueOf(calculateBMI(Float.parseFloat(heightTF.getText()), Float.parseFloat(weightTF.getText()))));
        }
    }//GEN-LAST:event_heightTFFocusLost
    
    //method that checks and calculates bmi when focus lost from weight
    private void weightTFFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_weightTFFocusLost
        //if either weight or height empty do nothing
       if (weightTF.getText().isEmpty()|| heightTF.getText().isEmpty()){
       } else {
           //if both value exists calculate bmi and set the text of bmi text field
           bmiTF.setText(String.valueOf(calculateBMI(Float.parseFloat(heightTF.getText()), Float.parseFloat(weightTF.getText()))));
       }
    }//GEN-LAST:event_weightTFFocusLost
    
    //method that updates values if check box for cardio is selected
    private void checkBoxCardioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxCardioActionPerformed
        //call method that add/subtract fee based on whether selected or deselected
        feesCalculation(checkBoxCardio,1000);
    }//GEN-LAST:event_checkBoxCardioActionPerformed

    //method that updates values if check box for yoga is selected
    private void checkBoxYogaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxYogaActionPerformed
        //call method that add/subtract fee based on whether selected or deselected
        feesCalculation(checkBoxYoga,1000);
    }//GEN-LAST:event_checkBoxYogaActionPerformed
    
    //method that updates values if check box for boxing is selected
    private void checkBoxBoxingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxBoxingActionPerformed
        //call method that add/subtract fee based on whether selected or deselected
        feesCalculation(checkBoxBoxing,1500);
    }//GEN-LAST:event_checkBoxBoxingActionPerformed
    
    //method that updates values if check box for gym is selected
    private void checkBoxGymActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxGymActionPerformed
        //call method that add/subtract fee based on whether selected or deselected
        feesCalculation(checkBoxGym,1000);
    }//GEN-LAST:event_checkBoxGymActionPerformed
    
    //method to perform update when items in table is clicked by mouse
    private void memberTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_memberTableMouseClicked
        // only execute if the mouse click is more than once
        if(evt.getClickCount()>1)
        {
            //get the value for selected row and colum
            int row = memberTable.getSelectedRow();
            int column = memberTable.getSelectedColumn();
            
            //if the column selected is for name i.e. column index of 1
            if(column == 1) {
                //display an input dialog box and get its value
                String updatedValue = JOptionPane.showInputDialog("Current value is: "+memberTable.getValueAt(row,column)+"\nEnter updated Value:");
                //if not submitted do nothing
                if (updatedValue  == null) {
                    return;
                }
                //if the input was empty provided show error
                if (updatedValue.isEmpty()){ 
                    JOptionPane.showMessageDialog(null, "No input provided!", "Error", JOptionPane.ERROR_MESSAGE);
                }
                // if the provided input has number or special characters show error
                else if(hasNumber(updatedValue) || hasSpecialCharacters(updatedValue)) {
                    JOptionPane.showMessageDialog(null, "Only alphabets allowed", "Error", JOptionPane.ERROR_MESSAGE);
                }
                //if input is valid update the value at table
                else {
                    memberTable.setValueAt(updatedValue.toUpperCase(), row, column);
                }
            }
            
            //if the column selected is for age or bmi i.e. column index of 2 or 9
            else if(column == 2 || column == 9) {
                //display an input dialog box and get its value
                String updatedValue = JOptionPane.showInputDialog("Current value is: "+memberTable.getValueAt(row,column)+"\nEnter updated Value:");
                //if not submitted do nothing
                if (updatedValue == null) {
                    return;
                }
                //if the input was empty throw error
                if (updatedValue.isEmpty()){ 
                    JOptionPane.showMessageDialog(null, "No input provided!", "Error", JOptionPane.ERROR_MESSAGE);
                }
                //if the input number is not valid number throw error
                else if(!isValidNumber(updatedValue))
                {
                    JOptionPane.showMessageDialog(null, "Only proper digits allowed!", "Error", JOptionPane.ERROR_MESSAGE);
                }
                //if valid input
                else {
                    //if it is the column for age update the value for age
                    if (column == 2)
                    {
                        memberTable.setValueAt(updatedValue, row, column);
                    }
                    //if it is the column for bmi calculate the viable target and update the bmi and target
                    else if(column == 9) {
                        checkViableTarget(Float.parseFloat(updatedValue));
                        memberTable.setValueAt(updatedValue, row, column);
                        memberTable.setValueAt(getSelectedRadioButtonText(targetGroup), row, column+1);
                    }
                }
            }
            
            //if the column selected is for activities i.e. column index of 7
            else if(column == 7) {
                //get the current activities string
                String currentActivities = (String)memberTable.getValueAt(row, column);
                //instantiate checkbox for all activities
                JCheckBox zumbaCheck = new JCheckBox("ZUMBA");
                JCheckBox yogaCheck = new JCheckBox("YOGA");
                JCheckBox boxingCheck = new JCheckBox("BOXING");
                JCheckBox saunaCheck = new JCheckBox("SAUNA");
                JCheckBox gymCheck = new JCheckBox("GYM");
                JCheckBox cardioCheck = new JCheckBox("CARDIO");
                //call method that first updates the checkboxes from the current selected activities
                updateCheckBox(currentActivities, zumbaCheck, yogaCheck, boxingCheck, saunaCheck, gymCheck, cardioCheck);
                //vall method to update the activities based on what the user selects
                updateActivites(row, column, zumbaCheck, yogaCheck, boxingCheck, saunaCheck, gymCheck, cardioCheck);
            }
            
            //if the column selected is for phone number i.e. column index of 4
            else if(column == 4) {
                // call method that show a dialog box that updates the phone number based on user input
                updatePhoneNumber(row, column);
            }
            
            //if the column selected is for address i.e. column index of 3
            else if (column == 3){
                String updatedValue = JOptionPane.showInputDialog("Current value is: "+memberTable.getValueAt(row,column)+"\nEnter updated Value:");
                //if not submitted do nothing
                if (updatedValue == null) {
                    return;
                }
                //if the input was empty throw error
                if (updatedValue.isEmpty()){ 
                    JOptionPane.showMessageDialog(null, "No input provided!", "Error", JOptionPane.ERROR_MESSAGE);
                }
                //if valid input update the value in the table
                else
                {
                    memberTable.setValueAt(updatedValue, row, column);
                }
            }
        }
    }//GEN-LAST:event_memberTableMouseClicked
    
    //method to perform sort based on the selected option from combobox
    private void sortButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortButtonActionPerformed
        // get the string of the item selected from sort combo box
        String sortConstraints = (String)sortComboBox.getSelectedItem();
        //create instance of merge sort
        MergeSort mergeSort = new MergeSort();
        
        //check what the combo box selected was
        switch (sortConstraints){
            case "NAME":
                // call merge method that sorts name
                mergeSort.sortByName(memberTable);
                break;
            case "AGE":
                //call merge  method that sorts age
                mergeSort.sortByAge(memberTable);
                break;
            case "BMI":
                //call merge method that sorts bmi
                mergeSort.sortByBMI(memberTable);
                break;
            default:
                //call merge method that sorts fees as it is the only option left
                mergeSort.sortByFees(memberTable);
                break;       
        }
    }//GEN-LAST:event_sortButtonActionPerformed
    
    //method to check if the input char for name text field has only valid characters
    private void nameTFKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nameTFKeyTyped
        // call method that checks if the entered input only has alphabets and whitespaces
        if(isString(evt.getKeyChar())){
           //if valid input set text field editable
            nameTF.setEditable(true);
        }
        else{
            //if invalid input set text field uneditable
            JOptionPane.showMessageDialog(mainFormPanel, "Name field only accepts alphabets!", "Error", JOptionPane.ERROR_MESSAGE);
            nameTF.setEditable(false);
        }
    }//GEN-LAST:event_nameTFKeyTyped
    
    //method to check if the input char for age text field has only valid characters
    private void ageTFKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_ageTFKeyTyped
        // call method to check if the entered character has only numbers
        if(isNumber(evt.getKeyChar())){
            //if valid input set text field editable
            ageTF.setEditable(true);
        }
        else{
            //if invalid input set text field uneditable
            ageTF.setEditable(false);
        }
    }//GEN-LAST:event_ageTFKeyTyped
    
    //method to check if the input char for phone text field has only valid characters
    private void phoneTFKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_phoneTFKeyTyped
        // call method to check if the typed character is only number
        if(isNumber(evt.getKeyChar())){
            //if valid input set text field editable
            phoneTF.setEditable(true);
        }
        else{
            //if invalid input set text field uneditable
            phoneTF.setEditable(false);
        }
    }//GEN-LAST:event_phoneTFKeyTyped
    
    //method to check if the input char for address text field has only valid characters
    private void addressTAKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_addressTAKeyTyped
        // call method to check if the typed char is a valid value
        if(isStringAddress(evt.getKeyChar())){
            //if valid input set text field editable
            addressTA.setEditable(true);
        }
        else{
            //if invalid input set text field uneditable
            addressTA.setEditable(false);
        }
    }//GEN-LAST:event_addressTAKeyTyped

    //method to check if the input char for height text field is number and only one '.' character is used
    private void heightTFKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_heightTFKeyTyped
        // call method to check if the input is only number or '.' (once)
        if(numberPoint(evt.getKeyChar(), heightTF.getText())){
            //if valid input make text field editable
            heightTF.setEditable(true);
        }
        else{
            //if invalid input make text field uneditable
            heightTF.setEditable(false);
        }
       
    }//GEN-LAST:event_heightTFKeyTyped
    
    //method to check if the input char for weight text field is number and only one '.' character is used
    private void weightTFKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_weightTFKeyTyped
        // call method to check if the input is only number or '.' (once)
        if(numberPoint(evt.getKeyChar(), weightTF.getText())){
            //if valid input make text field editable
            weightTF.setEditable(true);
        }
        else{
            //if invalid input make text field uneditable
            weightTF.setEditable(false);
        }
    }//GEN-LAST:event_weightTFKeyTyped

    // method to check which option from search combo box when combo box is selected
    private void searchComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchComboBoxActionPerformed
        // get the string of selected item
        String userCriteria = (String)searchComboBox.getSelectedItem();
        //check based on both string and index for activities selected
        if (searchComboBox.getSelectedIndex() == 2 || userCriteria.equals("ACTIVITIES")) {
            //disable to search text field and set a default text
            searchValue.setText("Press search Button");
            searchValue.setEnabled(false);
        }
        else {
            //if any other combobox item selected make the search value text field enabled
            searchValue.setText("");
            searchValue.setEnabled(true);
        }
    }//GEN-LAST:event_searchComboBoxActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TheHulkFitness.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TheHulkFitness.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TheHulkFitness.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TheHulkFitness.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TheHulkFitness().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel BmiLbl;
    private javax.swing.JLabel activitiesLbl;
    private javax.swing.JButton addBtn;
    private javax.swing.JLabel addressLbl;
    private javax.swing.JTextArea addressTA;
    private javax.swing.JScrollPane addressTxtArea;
    private javax.swing.JLabel ageLbl;
    private javax.swing.JTextField ageTF;
    private javax.swing.JTextField bmiTF;
    private javax.swing.JCheckBox checkBoxBoxing;
    private javax.swing.JCheckBox checkBoxCardio;
    private javax.swing.JCheckBox checkBoxGym;
    private javax.swing.JCheckBox checkBoxSauna;
    private javax.swing.JCheckBox checkBoxYoga;
    private javax.swing.JCheckBox checkBoxZumba;
    private javax.swing.JButton clearBtn;
    private javax.swing.JComboBox<String> comboJoinDay;
    private javax.swing.JComboBox<String> comboJoinMonth;
    private javax.swing.JComboBox<String> comboJoinYear;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JPanel displayPanel;
    private javax.swing.JMenuItem exitProgram;
    private javax.swing.JLabel feesLbl;
    private javax.swing.JTextField feesTF;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JPanel formPanel;
    private javax.swing.ButtonGroup genderGroup;
    private javax.swing.JLabel genderLbl;
    private javax.swing.JLabel heightLbl;
    private javax.swing.JTextField heightTF;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JRadioButtonMenuItem jRadioButtonMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel joinedDateLbl;
    private javax.swing.JLayeredPane layeredPane;
    private javax.swing.JLabel logoLbl;
    private javax.swing.JPanel mainFormPanel;
    private javax.swing.JLabel memberIdLbl;
    private javax.swing.JTextField memberIdTF;
    private javax.swing.JTable memberTable;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JLabel nameLbl;
    private javax.swing.JTextField nameTF;
    private javax.swing.JMenuItem openFIle;
    private javax.swing.JLabel phoneLbl;
    private javax.swing.JTextField phoneTF;
    private javax.swing.JRadioButton radioFemale;
    private javax.swing.JRadioButton radioMale;
    private javax.swing.JRadioButton radioStayFit;
    private javax.swing.JRadioButton radioWeightGain;
    private javax.swing.JRadioButton radioWeightLoss;
    private javax.swing.JButton searchButton;
    private javax.swing.JComboBox<String> searchComboBox;
    private javax.swing.JTextField searchValue;
    private javax.swing.JButton sortButton;
    private javax.swing.JComboBox<String> sortComboBox;
    private javax.swing.JButton startBtn;
    private javax.swing.JPanel startPanel;
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.ButtonGroup targetGroup;
    private javax.swing.JLabel targetLbl;
    private javax.swing.JLabel titleLbl;
    private javax.swing.JLabel weightLbl;
    private javax.swing.JTextField weightTF;
    // End of variables declaration//GEN-END:variables
 
    //method that aligns the help menu to the right end of the menu Bar
    private void manageBarComponents() {
        //add the fileMenu to the beginning of menu bar
        menuBar.add(fileMenu);
        //add a horizontal space
        menuBar.add(Box.createHorizontalGlue());
        //add the helpmenu at the end of menu bar
        menuBar.add(helpMenu);
        //call method to set the icon/text for helpMenu
        setIconHelpMenu();
    }
    
    //method to add icon to the help menu
    private void setIconHelpMenu() {
        //try to get the icon and add it 
        try {
        ImageIcon imageIcon=new ImageIcon(getClass().getResource("helpppp.png"));
        helpMenu.setIcon(imageIcon);
        helpMenu.setText("");
        }
        //if exception thrown only add text insttead
        catch (Exception e) {
            helpMenu.setText("Help");
        }
    }
    
    //method check if the entered character is Number
    public boolean isNumber(char ch){
        //check if the entered character has only digit or backspace or delete command
        if(Character.isDigit(ch) || ch == VK_BACK_SPACE || ch == VK_DELETE ){
            return true;
        }
        //if invalid input return false
        else{
            return false;  
        }
    }
    
    //methodcheck if the entered character is String and whitespace
    public boolean isString(char ch){
        //check if the enterd character has valid value i.e. only letter, whitespace, back space, or delete
        if (Character.isLetter(ch) || ch == VK_BACK_SPACE || ch == VK_DELETE || ch == ' '){
            return true;
        }
        //if not valid character return false
        else{
            return false;
        }
    }
    
    //method check if the entered character is String with , and whitespaces
    public boolean isStringAddress(char ch){
        //check if the entered character has only valid input i.e. letter, digit, whitepace, comma, backspace and delete
        if(Character.isLetter(ch) || Character.isDigit(ch) || ch == VK_BACK_SPACE || ch == VK_DELETE || ch == ' ' || ch == ','){
            return true;
        }
        //if character is not valid input return false
        else{
            return false;
        }
    }
    
    //method to check if the entered character is Number of has char '.' only once
    public boolean numberPoint(char ch, String current){
        //check if the passed character is any of the valid input i.e. number, dot(only one), backspace and delete
        if(Character.isDigit(ch) || ch == VK_BACK_SPACE || ch == VK_DELETE || ch == '.'){
            //if the input is '.' and the string already has '.' do not allow to add
            if (current.contains(Character.toString('.')) && ch == '.')
            {
                return false;
            }
            return true;
        }
        //if no valid input return false
        else{
            return false;
        }
    }
     
    //method to check if the entered string is a numeric value
    private boolean hasNumber(String stringValue){
        //loop over the the string value to get the each character
        for (int i = 0; i < stringValue.length(); i++){
            //if the character has number return true
            if (isDigit(stringValue.charAt(i))){
             return true;
            }
        }   
        //return false if no number in string
        return false;
    }
    
    //method to check if the entered character has any special character
    private boolean isSpecialCharacter(char characterValue){
        //character array of all special characters possibl
        char[] specialCharacters = {'.', '#', '!', '%', '$', '@', '~', 
            '`', '^', '&', '*', '(', ')', '<', '>', '?', '/', '\\', '|', ':', ';'};
        //loop over all the special characters and check with the entered character
        for (int i = 0; i < specialCharacters.length; i++){
            int result = Character.compare(specialCharacters[i], characterValue);
            //if the entered character matches the special characters return true 
            if (result == 0){
                return true;
            }
        }
        //if no match return false
        return false;
    }
    
    //method to check if the entered string has any special characters
    private boolean hasSpecialCharacters(String stringValue){
        // loop over each character in the string and check if it is special character
        for (int i = 0; i < stringValue.length(); i++){
            //if special character found return true
            if (isSpecialCharacter(stringValue.charAt(i))){
                return true;
            }
        }
        //if no special character return false
        return false;
    }
    
    //method to calculate the bmi value based on passed height and weight values
    private float calculateBMI(float height, float weight){
        // calculate the bmi value which is weight(in kg)/height(in m^2)
        float bmiValue = (weight*10000)/(height*height);
        // set the radio button for target based on bmi
        checkViableTarget(bmiValue);
        // return the bmiValue
        return(bmiValue);
    }
    
    //method to check if the passed string has only numeric value
    public boolean isValidNumber(String numericValue){
        //try to convert the string to float
        try{
            Float.valueOf(numericValue);
        }
        //if exception return false
        catch (NumberFormatException e){
            return false;
        }
        //if no exception return true
        return true;
    }
    
    //method to reset the values of all GUI components
    public void resetValues(){
        //set all textfield to empty
        nameTF.setText("");
        ageTF.setText("");
        phoneTF.setText("");
        addressTA.setText("");
        feesTF.setText("");
        heightTF.setText("");
        weightTF.setText("");
        bmiTF.setText("");
        
        //set radio button to default value
        radioMale.setSelected(true);
        radioWeightLoss.setSelected(true);
        
        //set all checkbox to unselected
        checkBoxZumba.setSelected(false);
        checkBoxCardio.setSelected(false);
        checkBoxYoga.setSelected(false);
        checkBoxBoxing.setSelected(false);
        checkBoxSauna.setSelected(false);
        checkBoxGym.setSelected(false);
        
        //set combo boxes to default index
        comboJoinDay.setSelectedIndex(0);
        comboJoinMonth.setSelectedIndex(0);
        comboJoinYear.setSelectedIndex(0);
        
        //set the activities list and fees to default value
        valueInFees = 0;
        activities = "";
    }

    // method to iterator over the button group and return the text of selected radio button
    public String getSelectedRadioButtonText(ButtonGroup group) {
        //iterated over buttons available in the passed group
        for (Enumeration<AbstractButton> buttons = group.getElements(); buttons.hasMoreElements();) {
            //get the next button in the list
            AbstractButton button = buttons.nextElement();
            //if the button is selected return the text of that button
            if (button.isSelected()) {
                return button.getText();
            }
        }
        //if no button selected return empty string
        return "";
    }

    //method to check if the joined date has been added and written it as string
    private String getJoinedDate() {
        //get the selected item for day month and year
        String day = String.valueOf(comboJoinDay.getSelectedItem());
        String month = String.valueOf(comboJoinMonth.getSelectedItem());
        String year = String.valueOf(comboJoinYear.getSelectedItem());
        
        //if any of the comboBox has default value return empty string else return value
        if(day.equals("DAY") || month.equals("MONTH") || year.equals("YEAR")) {
            return "";
        }
        else {
            return day+"/"+month+"/"+year;
        }
    }
    
    //method to check if atleast one of the check box is selected
    private boolean checkCheckBoxChecked() {
        //checks one after the other if any checkbox is selected
        if(checkBoxZumba.isSelected()){     
        }
        else if (checkBoxYoga.isSelected()){    
        } 
        else if (checkBoxGym.isSelected()){   
        } 
        else if (checkBoxCardio.isSelected()){    
        } 
        else if (checkBoxBoxing.isSelected()){   
        } 
        else if (checkBoxSauna.isSelected()){   
        }
        else{
            //return true if none of the checkbox selected
            return true;
        }   
     //return true if atleast one of the checkbox selected
     return false;
    
    }
   
    //initial value for the total fees to be paid
    int valueInFees = 0;
    //initial value for the activities choosen by a member
    String activities = "";
    
    // method that calculates the fees for the activity selected while adding data to table
    public void feesCalculation(JCheckBox checkBox, int price){
        // if the passed checkbox is selected add to activities string and totalfees
        if(checkBox.isSelected() == true){
            activities += checkBox.getText();
            valueInFees = valueInFees + price;
        }
        // if the passed checkbox has been deselected remove from activities and decrease from totalfees
        else{
            activities = activities.replace(checkBox.getText(),"");
            valueInFees = valueInFees - price;
        }
        
        //set the current calculated value of fee to the textfield
        feesTF.setText(String.valueOf(valueInFees));  
    }
    
    /*the below two methods are called when trying to update the activities of a member
    First the check boxes are updated based on the string of current activities 
    and then updated string and fees is calculated based on user input*/
    //method that updates the check box based to be displayed to user based on the current activities list from the table
    private void updateCheckBox(String currentActivities, JCheckBox zumbaCheck, JCheckBox yogaCheck, JCheckBox boxingCheck, JCheckBox saunaCheck, JCheckBox gymCheck, JCheckBox cardioCheck) {
        //update the checkboxes passed based on the string of activities passed
        if (currentActivities.contains("BOXING")){
            boxingCheck.setSelected(true);    
        } else{
            boxingCheck.setSelected(false);  
        }
        
        if (currentActivities.contains("GYM")){
            gymCheck.setSelected(true);    
        } else{
            gymCheck.setSelected(false); 
        }
        
        if (currentActivities.contains("YOGA")){
            yogaCheck.setSelected(true);   
        } else{
            yogaCheck.setSelected(false);  
        }
        
        if (currentActivities.contains("ZUMBA")){
            zumbaCheck.setSelected(true);    
        } else{
            zumbaCheck.setSelected(false);   
        }
        
        if (currentActivities.contains("CARDIO")){
            cardioCheck.setSelected(true);   
        } else{
            cardioCheck.setSelected(false);   
        }
        
        if (currentActivities.contains("SAUNA")){
            saunaCheck.setSelected(true);   
        } else{
            saunaCheck.setSelected(false);   
        }
    }
    
    //method to update the activities and fees for the data entered in the table according to user selection
    private void updateActivites(int row, int column, JCheckBox zumbaCheck, JCheckBox yogaCheck, JCheckBox boxingCheck, JCheckBox saunaCheck, JCheckBox gymCheck, JCheckBox cardioCheck) {
        //create a Jdialog box with the passed checkboxes
        JDialog activityUpdate = new JDialog(this, "Update Activities");
        activityUpdate.setLayout(new GridLayout(7,1));
        
        //add checkboxes
        activityUpdate.add(zumbaCheck);
        activityUpdate.add(yogaCheck);
        activityUpdate.add(boxingCheck);
        activityUpdate.add(saunaCheck);
        activityUpdate.add(gymCheck);
        activityUpdate.add(cardioCheck);
        
        //add updapte button
        JButton updateButton = new JButton("Update");
        updateButton.setBackground(new Color(0,153, 0));
        updateButton.setFont(new Font("Tahoma", Font.BOLD, 12));
        updateButton.setForeground(Color.WHITE);
        
        //add action listener to update button
        updateButton.addActionListener(new ActionListener()
        {
            public void actionPerformed(ActionEvent e)
            {
                //get list of currently check activities
                String activitiesChecked = getCheckBoxSelected();
                //if no activity was selected throw error
                if(activitiesChecked == null || activitiesChecked.isEmpty())
                {
                    JOptionPane.showMessageDialog(null, "Please select atleast one activity.", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                //get the fee based on the selected check box
                int feesTotalCheckBox = getCheckBoxSelectedFees();
                //set the current list of activities to table
                memberTable.setValueAt(activitiesChecked, row, column);
                //set the current fees to the table
                memberTable.setValueAt(String.valueOf(feesTotalCheckBox),row,column+1);
                //close the dialog
                activityUpdate.dispose();
            }
            
            //return list of selected activites by user
            private String getCheckBoxSelected() {
                //set initial value of activity list
                String activitiesChecked = "";
                
                //add activity based on checkbox selected
                if(zumbaCheck.isSelected()){  
                    activitiesChecked += "ZUMBA ";
                }
                if (yogaCheck.isSelected()){  
                    activitiesChecked += "YOGA ";
                }
                if (gymCheck.isSelected()){   
                    activitiesChecked += "GYM ";
                }
                if (cardioCheck.isSelected()){    
                    activitiesChecked += "CARDIO ";
                }
                if (boxingCheck.isSelected()){ 
                    activitiesChecked += "BOXING ";
                }
                if (saunaCheck.isSelected()){  
                    activitiesChecked += "SAUNA ";
                }
                
                //return the string of all selected activities
                return activitiesChecked;
            }
            
            //get fee based on selected activities
            private int getCheckBoxSelectedFees() {
                // initialize fee
                int feesTotal = 0;
                
                //checks if each checkbox is selected and adds fees
                if(zumbaCheck.isSelected()){  
                    feesTotal += 800;
                }
                if (yogaCheck.isSelected()){  
                    feesTotal += 1000; 
                }
                if (gymCheck.isSelected()){   
                    feesTotal += 1000;
                }
                if (cardioCheck.isSelected()){    
                    feesTotal += 1000;
                }
                if (boxingCheck.isSelected()){ 
                    feesTotal += 1500;
                }
                if (saunaCheck.isSelected()){  
                    feesTotal += 1200;
                }
                
                //return the calculated fees
                return feesTotal;
            }
        });
        //add button to Jdialog box
        activityUpdate.add(updateButton);
        
        //set default dialog values
        activityUpdate.setSize(250,450);
        activityUpdate.setVisible(true);
        activityUpdate.setResizable(false);
        activityUpdate.setLocationRelativeTo(null);
    }
    
    //method to update Phone Number from the table
    private void updatePhoneNumber(int row, int column) {
        //instantiate string builder to keep track of entered number
        StringBuilder currentNumber = new StringBuilder();
        //instantiate a dialog box that provides user option to enter input
        JDialog phoneNumberUpdate = new JDialog(this, "Update Phone Number");
        phoneNumberUpdate.setLayout(new GridLayout(6,1));
        
        //display only the textfield to show the output
        JPanel firstLine = new JPanel();
        firstLine.setLayout(new GridLayout(1,1));
        //create a textfield that shows user the entered value
        JTextField output = new JTextField();
        //the text field cannot be edited manually...done to ensure only valid values gets entered
        output.setEditable(false);
        firstLine.add(output);
        phoneNumberUpdate.add(firstLine);
        
        //display numbers 1 2 and 3 in same line
        JPanel secondLine = new JPanel();
        secondLine.setLayout(new GridLayout(1,3));
        JButton one = new JButton("1");
        //add action listener that adds number 1 to string builder
        one.addActionListener((ActionEvent e) -> {
            currentNumber.append("1");
            output.setText(currentNumber.toString());
        });
        secondLine.add(one);
        
        //add action listener that adds number 2 to string builder
        JButton two = new JButton("2");
        two.addActionListener((ActionEvent e) -> {
            currentNumber.append("2");
            output.setText(currentNumber.toString()); 
        });
        secondLine.add(two);
        
        //add action listener that adds number 3 to string builder
        JButton three = new JButton("3");
        three.addActionListener((ActionEvent e) -> {
            currentNumber.append("3");
            output.setText(currentNumber.toString()); 
        });
        secondLine.add(three);
        phoneNumberUpdate.add(secondLine);
        
         //display numbers 4 5 and 6 in same line
        JPanel thirdLine = new JPanel();
        thirdLine.setLayout(new GridLayout(1,3));
        //add action listener that adds number 4 to string builder
        JButton four = new JButton("4");
        four.addActionListener((ActionEvent e) -> {
            currentNumber.append("4");
            output.setText(currentNumber.toString()); 
        });
        thirdLine.add(four);
        
        //add action listener that adds number 5 to string builder
        JButton five = new JButton("5");
        five.addActionListener((ActionEvent e) -> {
            currentNumber.append("5");
            output.setText(currentNumber.toString()); 
        });
        thirdLine.add(five);
        
        //add action listener that adds number 6 to string builder
        JButton six = new JButton("6");
        six.addActionListener((ActionEvent e) -> {
            currentNumber.append("6");
            output.setText(currentNumber.toString()); 
        });
        thirdLine.add(six);
        phoneNumberUpdate.add(thirdLine);
        
        //display numbers 7 8 and 9 in same line
        JPanel fourthLine = new JPanel();
        fourthLine.setLayout(new GridLayout(1,3));
        //add action listener that adds number 7 to string builder
        JButton seven = new JButton("7");
        seven.addActionListener((ActionEvent e) -> {
            currentNumber.append("7");
            output.setText(currentNumber.toString()); 
        });
        fourthLine.add(seven);
        
        //add action listener that adds number 8 to string builder
        JButton eight = new JButton("8");
        eight.addActionListener((ActionEvent e) -> {
            currentNumber.append("8");
            output.setText(currentNumber.toString()); 
        });
        fourthLine.add(eight);
        
        //add action listener that adds number 9 to string builder
        JButton nine = new JButton("9");
        nine.addActionListener((ActionEvent e) -> {
            currentNumber.append("9");
            output.setText(currentNumber.toString()); 
        });
        fourthLine.add(nine);
        phoneNumberUpdate.add(fourthLine);
        
        //display numbers clear screen, 0 and backspace in same line
        JPanel fifthLine = new JPanel();
        fifthLine.setLayout(new GridLayout(1,3));
        //add action listener to button that clears the string
        JButton clear = new JButton("CLS");
        clear.addActionListener((ActionEvent e) -> {
            currentNumber.replace(0,currentNumber.length(),"");
            output.setText("");
        });
        fifthLine.add(clear);
        
        //add action listener that adds number 0 to string builder
        JButton zero = new JButton("0");
        zero.addActionListener((ActionEvent e) -> {
            currentNumber.append("0");
            output.setText(currentNumber.toString()); 
        });
        fifthLine.add(zero);
        
        //add action listener that removoes one element from string builder
        JButton backspace = new JButton("<=");
        backspace.addActionListener((ActionEvent e) -> {
            if(currentNumber.length()!= 0)
            {
                currentNumber.replace(currentNumber.length()-1,currentNumber.length(),"");
            }
            output.setText(currentNumber.toString());
        });
        fifthLine.add(backspace);
        phoneNumberUpdate.add(fifthLine);
        
        //display single button in a line
        JPanel sixthLine = new JPanel();
        sixthLine.setLayout(new GridLayout(1,1));
        //add a button that updates the entered value to the table
        JButton updatePhone = new JButton("Update");
        updatePhone.addActionListener((ActionEvent e) -> {
            if(currentNumber == null || currentNumber.toString().isEmpty())
            {
                JOptionPane.showMessageDialog(null, "Phone number cannot be empty", "Error",1);
                return;
            }
            //convert the string builder to string and add to  table at required row and column
            memberTable.setValueAt(currentNumber.toString(), row, column);
            //dispose the dialog box after updating
            phoneNumberUpdate.dispose();
        });
        //customize the update button
        updatePhone.setBackground(greenBG);
        updatePhone.setForeground(Color.WHITE);
        updatePhone.setFont(new Font("Tahoma", Font.BOLD, 12));
        sixthLine.add(updatePhone);
        phoneNumberUpdate.add(sixthLine);
        
        //customize the JDialog box
        phoneNumberUpdate.setSize(250,450);
        phoneNumberUpdate.setVisible(true);
        phoneNumberUpdate.setResizable(false);
        phoneNumberUpdate.setLocationRelativeTo(null);
    }
    
    //method to set the viable target for a member based on their bmi value
    private void checkViableTarget(Float bmiValue) {
        //checks the entered bmi value and assign the target based on it
        //underweight
        if (bmiValue <= 18.5)
        {
            radioWeightGain.setSelected(true);
        }
        //healthy
        else if(bmiValue > 18.5 && bmiValue <= 24.9)
        {
            radioStayFit.setSelected(true);
        }
        //overweight
        else
        {
            radioWeightLoss.setSelected(true);
        }
    }
    
    //method that searches counts and list members based on activities
    private void searchByActivities() {
        //intantiate a jdialog box that gives options activities to search from
        JDialog activitiesButtons = new JDialog(this, "Choose activities");
        GridLayout layout = new GridLayout(7,1);
        activitiesButtons.setLayout(layout);
        //instatiate a button group that has all the below buttons
        ButtonGroup group = new ButtonGroup();
        
        // instantiate radio button for all the avilable activities and add to button group
        JRadioButton yoga = new JRadioButton("YOGA");
        yoga.setSelected(true);
        yoga.setForeground(Color.WHITE);
        group.add(yoga);
        JRadioButton boxing = new JRadioButton("BOXING");
        boxing.setForeground(Color.WHITE);
        group.add(boxing);
        JRadioButton zumba= new JRadioButton("ZUMBA");
        zumba.setForeground(Color.WHITE);
        group.add(zumba);
        JRadioButton cardio = new JRadioButton("CARDIO");
        cardio.setForeground(Color.WHITE);
        group.add(cardio);
        JRadioButton gym = new JRadioButton("GYM");
        gym.setForeground(Color.WHITE);
        group.add(gym);
        JRadioButton sauna = new JRadioButton("SAUNA");
        sauna.setForeground(Color.WHITE);
        group.add(sauna);
        
        //add all the radio buttons to the JDialog
        activitiesButtons.add(yoga);
        activitiesButtons.add(boxing);
        activitiesButtons.add(zumba);
        activitiesButtons.add(cardio);
        activitiesButtons.add(gym);
        activitiesButtons.add(sauna);
        
        //add a button that executes the serch
        JButton search = new JButton("Search");
        search.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent e) {
              String selectedActivity =  getSelectedRadioButtonText(group);
              calculateActivitiesCount(selectedActivity);
            }
            
            //match the selected activity with the table to get the counts
            private void calculateActivitiesCount(String selectedActivity) {
               int count = 0;
               ArrayList<String> details = new ArrayList();
               int row = memberTable.getRowCount();
               //check if no row in table
               if (row == 0){
                   JOptionPane.showMessageDialog(null, "No data in table to search from", "Error", JOptionPane.ERROR_MESSAGE);
               }
               //iterate over the table and match the activites with selected activities and keep count
               //also add the member id, name, and phone number to array list
               for (int i = 0; i < row; i++){
                   String rowValue = (String)memberTable.getValueAt(i,7);
                   if (rowValue.contains(selectedActivity)) {
                       count++;
                       details.add((String)memberTable.getValueAt(i,0)+","+(String)memberTable.getValueAt(i,1)+","+(String)memberTable.getValueAt(i,4));
                   }
               }
               //check how many memebrs found and display result accordingly
               if (count == 0) {
                   JOptionPane.showMessageDialog(null,"No members take "+selectedActivity,"Activity count",JOptionPane.INFORMATION_MESSAGE);
               }
               else {
                   //create a frame to display results and details in table
                   JFrame searchResult = new JFrame("Activities count");
                   BorderLayout layout = new BorderLayout();
                   JLabel resultLabel = new JLabel(count+" members take "+selectedActivity+":");
                   resultLabel.setHorizontalAlignment(JLabel.CENTER);
                   //instatiate column data
                   String[] columnData = {"ID", "Name", "Phone Number"};
                   String[][] rowData = new String[count][3];
                   //get data for row from the arraylist of member id, name, phone added above
                   for (int i = 0; i < count; i++) {
                       String detail = details.get(i);
                       String[] detailSplitted = detail.split(",");
                       for (int j = 0; j < detailSplitted.length; j++) {
                           rowData[i][j] = detailSplitted[j];
                       }
                   }
                   //create table with the above row and column data
                   JTable resultTable = new JTable(rowData, columnData);
                   //add scroll to the table
                   JScrollPane scrollPane = new JScrollPane(resultTable);
                   
                   //manage display details for the JFrame
                   searchResult.setLayout(layout);
                   searchResult.add(resultLabel, BorderLayout.NORTH);
                   searchResult.add(scrollPane, BorderLayout.CENTER);
                   searchResult.setSize(400,150);
                   searchResult.setVisible(true);
                   searchResult.setResizable(false);
                   searchResult.setLocationRelativeTo(null);
               }
           }
        });
        //set display details for search button
        search.setBackground(greenBG);
        search.setForeground(Color.WHITE);
        search.setFont(new Font("Arial",Font.BOLD, 18));
        
        //add search button to the JDialog and manage its displays that prompted the activities selection
        activitiesButtons.add(search);
        activitiesButtons.getContentPane().setBackground(darkBG);
        activitiesButtons.setSize(250,450);
        activitiesButtons.setVisible(true);
        activitiesButtons.setResizable(false);
        activitiesButtons.setLocationRelativeTo(null);
    }
    
}